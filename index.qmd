---
pagetitle: "Fundamentals of Data Science"
page-layout: custom
section-divs: false
toc: false
css: styles/homepage.css
description: |
  Fundamental Data Science Course: originally written for ESTIN's students.
hide-description: true
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/kiddos.png
listing:
    id: sample-listings
    contents:
        - "content/chapter_1/index.qmd"
        - "content/chapter_2/index.qmd"

    type: grid
    sort: "number"
    categories: true
echo: false
---



:::::: {.hero-banner}

::::: {.content-block .py-4}

:::: {.hero-text}


::: {.content-visible when-profile="en"}

# Fundamentals of _Data Science_ {{< fa brands python >}} {.mt-1 .unnumbered}


## [Chemseddine Berbague](https://www.example.example/) {.mt-1 .unnumbered}

```{=html}
<div style="text-align: right;">
<a class="github-button" href="https://github.com/linogaliana/python-datascientist" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star this website on Github">Star this website on Github</a><script async defer src="https://buttons.github.io/buttons.js"></script>
</div>
```

### An introduction to [`Data Science` {{< fa brands python >}}](https://www.example.example) {-}

Second year engineering course from [`ESTIN`](https://www.example.example) (Secondary Cycle).


The entire content of this course is freely available here
or on [`Github`](https://www.example.example)
<a href="https://www.example.example" class="github"><i class="fab fa-github"></i></a> and can be tested
as _notebooks_ [`Jupyter` {{< iconify simple-icons:jupyter >}}](https://en.wikipedia.org/wiki/Project_Jupyter).

```{=html}
<div class="lang-switch-button" style="text-align:right; margin-top:1rem; margin-bottom:1rem;">
  <a href="/index.html" class="button-cta">
    <button class="btn disabled"><i class="fa fa-language"></i> La version francaise n'est pas disponible.
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="20" height="20" style="vertical-align: middle; margin-left: 0.5em; display: inline-block;"><mask id="circleFlagsLangFr"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><g mask="url(#circleFlagsLangFr)"><path fill="#0055A4" d="M0 0h512v512H0z"/><path fill="#fff" d="M170.7 0h170.6v512H170.7z"/><path fill="#EF4135" d="M341.3 0H512v512H341.3z"/></g></svg>
    </button>
  </a>
</div>
```

:::

<br>

[Get Started](/content/chapter_1/index.qmd){.btn-action-primary .btn-action .btn .btn-lg .w-100 role="button"}


::::

:::: {.hero-animation}
![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/kiddos.png)
::::

:::::


::::::


:::: {.content-block .py-4}

```{ojs}
html`${viewof ordre}`
```

::: {.content-visible when-profile="en"}

```{ojs}
labels = ["Chapters in order", "Chapters in mosaic"]
version_ui = "en"
```

:::


```{python}
#| output: asis
#| echo: false
from build.homepage.chapterlist import create_div_chapter_list


text_en = (
  "A step-by-step course to explore data science with {{< fa brands python >}}, "
  "structured into complementary yet standalone chapters.\n\n"
)


final_html_en = create_div_chapter_list(
  version="en",
  introductory_text=text_en
)

final_html = (
  "<div class='list-chapter-ordered'>"

  f'{final_html_en}'
  "</div>"
)

print(final_html)
```



::: {#sample-listings .list-chapter-unordered}
:::


::::


```{ojs}
//| echo: false
viewof ordre = ToggleSwitch({
  labels: labels,
  values: ["ordre", "vrac"],
  value: "vrac",
  sliderColor: quartoThemeIsDark ? "#e7c582" : "#444",
  textColor: quartoThemeIsDark ? "#e7c582" : "#444"
})
```

```{ojs}
// Capture `.list-chapter-unordered`
initialOrdered = Array.from(document.querySelectorAll('.list-chapter-ordered'))
  .map(div => div.innerHTML)

initialUnordered = Array.from(document.querySelectorAll('.list-chapter-unordered'))
  .map(div => div.innerHTML)
```

```{ojs}
//| output: false
{
  const orderedDivs = document.querySelectorAll('.list-chapter-ordered');
  const unorderedDivs = document.querySelectorAll('.list-chapter-unordered');

  const lang = version_ui; // 'fr' ou 'en'
  const otherLang = lang === 'fr' ? 'en' : 'fr';

  if (ordre === 'vrac') {
    unorderedDivs.forEach((div, i) => div.innerHTML = initialUnordered[i]);
    orderedDivs.forEach(div => div.innerHTML = '');
  } else {
    orderedDivs.forEach((div, i) => {
      // Restaurer le contenu initial
      div.innerHTML = initialOrdered[i];

      // Supprimer le bloc de la langue non sélectionnée
      const otherLangBlock = div.querySelector(`.list-chapter-ordered-${otherLang}`);
      if (otherLangBlock) otherLangBlock.remove();
    });

    // Cacher les unordered
    unorderedDivs.forEach(div => div.innerHTML = '');
  }
}
```




```{ojs}
viewof quartoThemeIsDark = {
  const span = html`<span style="display: none;"></span>`;

  function updateTheme() {
    const isDark = document.body.classList.contains("quarto-dark");
    span.value = isDark;
    span.dispatchEvent(new CustomEvent("input"));
  }

  // Initial check
  updateTheme();

  // Observer les changements de classe sur <body>
  const observer = new MutationObserver(() => updateTheme());

  observer.observe(document.body, {
    attributes: true,
    attributeFilter: ["class"]
  });

  // Nettoyage si jamais nécessaire
  span.remove = () => observer.disconnect();

  return span;
}

```


```{ojs}
//| echo: false
ToggleSwitch = ({
  labels = ["Gauche", "Droite"],
  values = ["left", "right"],
  value = values[0],
  sliderColor = "#275EFE",
  textColor = "#444"
} = {}) => {
  const [labelLeft, labelRight] = labels;
  const [valLeft, valRight] = values;

  const node = html`<div class="toggle-wrapper"
                       style="--slider-color: ${sliderColor}; --text-color: ${textColor}">
    <span class="label left">${labelLeft}</span>

    <label class="toggle-ios">
      <input type="checkbox" ${value === valRight ? "checked" : ""}>
      <span class="slider"></span>
    </label>

    <span class="label right">${labelRight}</span>

    <style>
    ${styleOptions}
    </style>
  </div>`;

  const input = node.querySelector("input");

  const updateLabels = () => {
    node.querySelector(".label.left").classList.toggle("active", !input.checked);
    node.querySelector(".label.right").classList.toggle("active", input.checked);
  };

  Object.defineProperty(node, "value", {
    get: () => (input.checked ? valRight : valLeft),
    set: (v) => {
      input.checked = (v === valRight);
      updateLabels();
    }
  });

  input.addEventListener("change", () => {
    updateLabels();
    node.dispatchEvent(new CustomEvent("input"));
  });

  updateLabels();
  return node;
}

styleOptions = `
.toggle-wrapper {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-family: sans-serif;
  font-size: 14px;
  color: var(--text-color);
}

.label {
  transition: font-weight 0.2s;
}

.label.active {
  font-weight: bold;
}

.toggle-ios {
  position: relative;
  display: inline-block;
  width: 44px;
  height: 24px;
}

.toggle-ios input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: 0.3s;
  border-radius: 34px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  top: 3px;
  background-color: white;
  transition: 0.3s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: var(--slider-color);
}

input:checked + .slider:before {
  transform: translateX(20px);
}
`
```


```{ojs}
//| output: false
{
  const appendix = document.querySelector('#quarto-appendix');
  if (appendix) {
    const wrapper = document.createElement('div');
    wrapper.className = 'content-block py-4';
    wrapper.innerHTML = appendix.innerHTML;
    // Optional: replace the original appendix in the DOM
    appendix.replaceWith(wrapper);
    wrapper;
  } else {
    "appendix not found";
  }
}
```


```{ojs}
//| output: false
{
  setTimeout(() => {
    const giscus = document.querySelector('.giscus');
    if (giscus) giscus.style.display = "none";
  }, 3000); // 5000ms = 5 seconds
}
```